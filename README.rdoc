= Streamio FFMPEG

Simplest possible wrapper around FFMPEG to get metadata from movie files and do transcoding. IN DEVELOPMENT - Current version only handles basic metadata parsing.

== Installation

  sudo gem install streamio-ffmpeg

(should add instructions for ffmpeg installation here as well)

== Usage

=== Reading Metadata

  movie = FFMPEG::Movie.new("path/to/movie.mov")
  
  movie.duration # 7.5 (duration of the movie in seconds)
  movie.bitrate # 481 (bitrate in kb/s)
  
  movie.video_stream # "h264, yuv420p, 640x480 [PAR 1:1 DAR 4:3], 371 kb/s, 16.75 fps, 15 tbr, 600 tbn, 1200 tbc" (raw video stream info)
  movie.video_codec # "h264"
  movie.colorspace # "yuv420p"
  movie.resolution # "640x480"
  movie.width # 640 (width of the movie in pixels)
  movie.height # 480 (height of the movie in pixels)
  movie.frame_rate # 16.72 (frames per second)
  
  movie.audio_stream # "aac, 44100 Hz, stereo, s16, 75 kb/s" (raw audio stream info)
  movie.audio_codec # "aac"
  movie.audio_sample_rate # 44100
  movie.audio_channels # 2
  
  movie.valid? # true (would be false if ffmpeg fails to read the movie)
  
=== Transcoding

Use :output_file option to specify the output file path.
  
  movie.transcode(:output_file => "tmp/movie.mp4") # Default ffmpeg settings for mp4 format

Keep track of progress with an optional block.

  movie.transcode(:output_file => "movie.mp4") { |progress| puts progress } # 0.2 ... 0.5 ... 1.0

Give custom command line options to ffmpeg through :raw_options.

  movie.transcode(:raw_options => "-ac aac -vc libx264 -ac 2 ...", :output_file => "movie.mp4")
  
The transcode function returns a Movie object for the encoded file.

  transcoded_movie = movie.transcode(:output_file => "tmp/movie.flv")
  
  transcoded_movie.video_codec # "flv"
  transcoded_movie.audio_codec # "mp3"

== Copyright

Copyright (c) 2010 David Backeus. See LICENSE for details.
